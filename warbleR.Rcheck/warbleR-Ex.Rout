
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "warbleR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "warbleR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('warbleR')
Loading required package: maps
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autodetec")
> ### * autodetec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: autodetec
> ### Title: Automatically detect vocalizations in sound files
> ### Aliases: autodetec
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D writeWave(Phae.long4,"Phae.long4.wav") 
> ##D 
> ##D ad <- autodetec(threshold = 5, env = "hil", ssmooth = 300, power=1,
> ##D bp=c(2,9), xl = 2, picsize = 2, res = 200, flim= c(1,11), osci = TRUE,
> ##D wl = 300, ls = FALSE, sxrow = 2, rows = 4, mindur = 0.1, maxdur = 1, set = TRUE)
> ##D 
> ##D #run it with different settings
> ##D ad <- autodetec(threshold = 90, env = "abs", ssmooth = 300, power = 1, redo = TRUE,
> ##D bp=c(2,9), xl = 2, picsize = 2, res = 200, flim= c(1,11), osci = TRUE, 
> ##D wl = 300, ls = FALSE,  sxrow = 2, rows = 4, mindur=0.1, maxdur=1, set = TRUE)
> ##D 
> ##D #check this folder!!
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("autodetec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("catalog")
> ### * catalog
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: catalog
> ### Title: Create catalog of vocal signals
> ### Aliases: catalog
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2","selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav") 
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D  writeWave(Phae.long3,"Phae.long3.wav")
> ##D  writeWave(Phae.long4,"Phae.long4.wav")
> ##D 
> ##D 
> ##D catalog(X = selec.table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = T,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 0)
> ##D  
> ##D  #different time scales and tag palette
> ##D catalog(X = selec.table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, 
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 0, 
> ##D  tag.pal = list(terrain.colors))
> ##D  
> ##D  #adding tags and changing spectro palette
> ##D catalog(X = selec.table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, pal = reverse.heat.colors,
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 1, 
> ##D  tag.pal = list(terrain.colors), tags = "sound.files")
> ##D 
> ##D  #create a bigger selection table
> ##D  X <- rbind(selec.table, selec.table, selec.table, selec.table)
> ##D  X <- rbind(X, X)
> ##D  
> ##D  #create some simulated labels
> ##D  X$songtype <- sample(letters[13:15], nrow(X), replace = T)
> ##D  X$indiv <- sample(letters[1:12], nrow(X), replace = T)
> ##D 
> ##D # 12 columns in 5 rows, 2 tags
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, 
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  collev = seq(-65, 0, 5), tag.pal = list(terrain.colors), tags = c("songtype", "indiv"))
> ##D 
> ##D 
> ##D # with legend
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  width = 20, collev = seq(-65, 0, 5), tag.pal = list(terrain.colors),
> ##D   tags = c("songtype", "indiv"))
> ##D   
> ##D   # horizontal orientation
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "h",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  width = 20, collev = seq(-65, 0, 5), tag.pal = list(terrain.colors),
> ##D   tags = c("songtype", "indiv"))
> ##D check this floder
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("catalog", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("catalog2pdf")
> ### * catalog2pdf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: catalog2pdf
> ### Title: 'catalog2pdf' combines 'catalog' images into pdfs
> ### Aliases: catalog2pdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2"))
> ##D writeWave(Phae.long1,"Phae.long1.wav") 
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D 
> ##D catalog(X = selec.table, nrow = 2, ncol = 4)
> ##D 
> ##D # now create single pdf removing jpeg
> ##D catalog2pdf(keep.img = FALSE)
> ##D 
> ##D # check this floder
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("catalog2pdf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("checksels")
> ### * checksels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checksels
> ### Title: Check selection data frames
> ### Aliases: checksels
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ 
+ checksels(X = selec.table)
+ }
      sound.files channel selec     start       end bottom.freq  top.freq
1  Phae.long1.wav       1     1 1.1693549 1.3423884    2.220105  8.604378
2  Phae.long1.wav       1     2 2.1584085 2.3214565    2.169437  8.807053
3  Phae.long1.wav       1     3 0.3433366 0.5182553    2.218294  8.756604
4  Phae.long2.wav       1     1 0.1595983 0.2921692    2.316862  8.822316
5  Phae.long2.wav       1     2 1.4570585 1.5832087    2.284006  8.888027
6  Phae.long3.wav       1     1 0.6265520 0.7577715    3.006834  8.822316
7  Phae.long3.wav       1     2 1.9742132 2.1043921    2.776843  8.888027
8  Phae.long3.wav       1     3 0.1233643 0.2545812    2.316862  9.315153
9  Phae.long4.wav       1     1 1.5168116 1.6622365    2.513997  9.216586
10 Phae.long4.wav       1     2 2.9326920 3.0768784    2.579708 10.235116
11 Phae.long4.wav       1     3 0.1453977 0.2904966    2.579708  9.742279
   sel.comment rec.comment            check.res  duration min.n.samples
1          c24          NA                   OK 0.1730334          3893
2          c25          NA                   OK 0.1630480          3668
3          c26          NA                   OK 0.1749187          3935
4          c27          NA                   OK 0.1325709          2982
5          c28          NA                   OK 0.1261502          2838
6          c29          NA                   OK 0.1312195          2952
7          c30          NA                   OK 0.1301789          2929
8          c31          NA                   OK 0.1312170          2952
9          c32          NA sound file not found        NA            NA
10         c33          NA sound file not found        NA            NA
11         c34          NA sound file not found        NA            NA
   sample.rate channels bits
1        22500        1   16
2        22500        1   16
3        22500        1   16
4        22500        1   16
5        22500        1   16
6        22500        1   16
7        22500        1   16
8        22500        1   16
9           NA       NA   NA
10          NA       NA   NA
11          NA       NA   NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checksels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("checkwavs")
> ### * checkwavs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: checkwavs
> ### Title: Check .wav files
> ### Aliases: checkwavs
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ # without selection data frame
+ checkwavs()
+ 
+ # without selection data frame
+ checkwavs(X = selec.table)
+ }
All files can be read!
All files can be read!
  smallest number of samples: 2838 (sound file:Phae.long2.wav; selection label: 2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("checkwavs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("color.spectro")
> ### * color.spectro
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: color.spectro
> ### Title: Highlight spectrogram regions
> ### Aliases: color.spectro
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  
> ##D # First set empty folder
> ##D # setwd(tempdir())
> ##D data(list = c("Phae.long1", "selec.table"))
> ##D writeWave(Phae.long1, "Phae.long1.wav") #save sound files 
> ##D 
> ##D  # subset selection table
> ##D  st <- selec.table[selec.table$sound.files == "Phae.long1.wav",]
> ##D  
> ##D  # read wave file as an R object
> ##D  sgnl <- tuneR::readWave(as.character(st$sound.files[1]))
> ##D  
> ##D  # create color column
> ##D  st$colors <- c("red2", "blue", "green")
> ##D  
> ##D  # highlight selections
> ##D  color.spectro(wave = sgnl, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-90, 0, 5), 
> ##D  dB = "B", X = st, col.clm = "colors", base.col = "skyblue",  t.mar = 0.07, f.mar = 0.1, 
> ##D  interactive = NULL)
> ##D  
> ##D  # interactive (selected manually: you have to select them by clicking on the spectrogram)
> ##D  color.spectro(wave = sgnl, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-90, 0, 5),
> ##D   dB = "B", col.clm = "colors", t.mar = 0.07, f.mar = 1, interactive = 2)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("color.spectro", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compare.methods")
> ### * compare.methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compare.methods
> ### Title: Assessing the performance of acoustic distance measurements
> ### Aliases: compare.methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D writeWave(Phae.long4,"Phae.long4.wav")
> ##D 
> ##D compare.methods(X = selec.table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D methods = c("XCORR", "dfDTW"), parallel = 1, it = "jpeg")
> ##D 
> ##D #remove progress bar
> ##D compare.methods(X = selec.table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D methods = c("XCORR", "dfDTW"), parallel = 1, it = "jpeg", pb = FALSE)
> ##D 
> ##D #check this folder!
> ##D getwd()
> ##D 
> ##D 
> ##D #compare SP and XCORR
> ##D #first we need to create a larger data set as the PCA that summarizes the spectral parameters
> ##D #needs more units (rows) that variables (columns)
> ##D #so I just create a new selection table repeating 3 times selec.table
> ##D st2 <- rbind(selec.table, selec.table, selec.table)
> ##D 
> ##D #note that the selection labels should be also changed
> ##D st2$selec <- 1:nrow(st2)
> ##D #now we can compare SP method against XCORR
> ##D compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
> ##D 
> ##D #compare SP method against dfDTW
> ##D compare.methods(X = st2, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D methods = c("dfDTW", "SP"), parallel = 1, it = "jpeg")
> ##D 
> ##D #alternatively we can provide our own SP matrix
> ##D sp <- specan(selec.table, bp = c(0, 10))
> ##D 
> ##D #and selec just a few variables to avoid the problem of # observations vs # parameters in PCA
> ##D sp <- sp[, 1:7]
> ##D 
> ##D compare.methods(X = selec.table, flim = c(0, 10), sp = sp, bp = c(0, 10), mar = 0.1, wl = 300,
> ##D ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D methods = c("XCORR", "SP"), parallel = 1, it = "jpeg")
> ##D 
> ##D #note that "SP" should also be included as a method in 'methods'
> ##D #again, all images are saved in the working directory
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compare.methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("consolidate")
> ### * consolidate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: consolidate
> ### Title: Consolidate sound files into a single folder
> ### Aliases: consolidate
> 
> ### ** Examples
> 
> { 
+ # First set empty folder
+ # setwd(tempdir())
+ 
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ 
+ # create first folder
+ dir.create("folder1")
+ writeWave(Phae.long1, file.path("folder1","Phae.long1.wav"))
+ writeWave(Phae.long2, file.path("folder1","Phae.long2.wav"))
+ 
+ # create second folder
+ dir.create("folder2")
+ writeWave(Phae.long3, file.path("folder2","Phae.long3.wav"))
+ writeWave(Phae.long4, file.path("folder2","Phae.long4.wav"))
+ 
+ # consolidate in a single folder
+ consolidate()
+ 
+ # or if tempdir wa used
+ # consolidate(path = tempdir())
+ }
                                                                         original_dir
1         /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck
2 /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck/folder1
3         /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck
4 /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck/folder1
5         /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck
6 /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck/folder2
7         /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck
8 /home/m/Dropbox/warbleR/warbleR/home/m/Dropbox/warbleR/warbleR.RcheckRcheck/folder2
        old_name             new_name file_size_bytes     duplicate
1 Phae.long1.wav Phae.long1.wav-1.WAV          112582 possible.dupl
2 Phae.long1.wav Phae.long1.wav-2.WAV          112582 possible.dupl
3 Phae.long2.wav Phae.long2.wav-1.WAV           76582 possible.dupl
4 Phae.long2.wav Phae.long2.wav-2.WAV           76582 possible.dupl
5 Phae.long3.wav Phae.long3.wav-1.WAV           99080 possible.dupl
6 Phae.long3.wav Phae.long3.wav-2.WAV           99080 possible.dupl
7 Phae.long4.wav Phae.long4.wav-1.WAV          144080 possible.dupl
8 Phae.long4.wav Phae.long4.wav-2.WAV          144080 possible.dupl
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("consolidate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coor.graph")
> ### * coor.graph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coor.graph
> ### Title: Coordinated singing graphs
> ### Aliases: coor.graph
> 
> ### ** Examples
> 
> {
+ 
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ # load simulate singing events  (see data documentation)
+ data(sim.coor.sing)
+ 
+ # make coor.graphs in tiff format
+ coor.graph(X = sim.coor.sing, ovlp = TRUE, only.coor = FALSE, xl =2, res =80, 
+ it = "tiff", img = TRUE)
+ 
+ 
+ #' # make coor.graphs in graphic device format
+ cgs <- coor.graph(X = sim.coor.sing, ovlp = TRUE, only.coor = FALSE, img = FALSE)
+ 
+ cgs
+ }
[[1]]

[[2]]

[[3]]

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coor.graph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("coor.test")
> ### * coor.test
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: coor.test
> ### Title: Randomization test for singing coordination
> ### Aliases: coor.test
> 
> ### ** Examples
> 
> {
+ #load  simulated singing data (see data documentation)
+ data(sim.coor.sing)
+ 
+ # testing if coordination happens less than expected by chance
+ coor.test(sim.coor.sing, iterations = 100, less.than.chance = TRUE)
+ 
+ # testing if coordination happens more than expected by chance
+ coor.test(sim.coor.sing, iterations = 100, less.than.chance = FALSE)
+ }
  sing.event obs.ovlps mean.random.ovlps p.value
1     altern        20             37.17    1.00
2       ovlp        57             39.23    0.01
3    uncoord        39             40.75    0.75
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("coor.test", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cut_sels")
> ### * cut_sels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cut_sels
> ### Title: Cut selections into individual sound files
> ### Aliases: cut_sels
> 
> ### ** Examples
> 
> { 
+ # First set empty folder
+ # setwd(tempdir())
+ 
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ # make spectrograms
+ 
+ cut_sels(selec.table)
+  
+ cut_sels(selec.table, overwrite = TRUE, labels = c("sound.files", "selec", "sel.comment"))
+  
+  #check this folder!!
+ getwd()
+ }
[1] "/home/m/Dropbox/warbleR/warbleR.Rcheck"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cut_sels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dfDTW")
> ### * dfDTW
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfDTW
> ### Title: Acoustic dissimilarity using dynamic time warping on dominant
> ###   frequency contours
> ### Aliases: dfDTW
> 
> ### ** Examples
> 
> {
+ # set the temp directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ writeWave(Phae.long2, "Phae.long2.wav") #save sound files 
+ writeWave(Phae.long1, "Phae.long1.wav")
+ 
+ # run function 
+ dfDTW(selec.table, length.out = 30, flim = c(1, 12), bp = c(2, 9), wl = 300)
+ 
+ }
Creating spectrograms overlaid with dominant frequency measurements:
                 Phae.long1.wav-1 Phae.long1.wav-2 Phae.long1.wav-3
Phae.long1.wav-1            0.000            7.277           11.403
Phae.long1.wav-2            7.277            0.000           11.782
Phae.long1.wav-3           11.403           11.782            0.000
Phae.long2.wav-1           26.383           29.081           26.065
Phae.long2.wav-2           29.855           35.805           28.627
Phae.long3.wav-1           16.505           16.586           17.323
Phae.long3.wav-2           26.436           26.297           24.198
Phae.long3.wav-3           29.014           30.795           28.689
Phae.long4.wav-1           39.506           36.721           41.315
Phae.long4.wav-2           33.217           32.438           32.369
Phae.long4.wav-3           30.887           31.487           31.159
                 Phae.long2.wav-1 Phae.long2.wav-2 Phae.long3.wav-1
Phae.long1.wav-1           26.383           29.855           16.505
Phae.long1.wav-2           29.081           35.805           16.586
Phae.long1.wav-3           26.065           28.627           17.323
Phae.long2.wav-1            0.000           13.813           14.622
Phae.long2.wav-2           13.813            0.000           14.920
Phae.long3.wav-1           14.622           14.920            0.000
Phae.long3.wav-2           12.140           10.799            9.600
Phae.long3.wav-3           13.703           11.293           10.950
Phae.long4.wav-1           21.670           28.505           34.867
Phae.long4.wav-2           24.228           30.846           32.413
Phae.long4.wav-3           22.703           32.099           29.364
                 Phae.long3.wav-2 Phae.long3.wav-3 Phae.long4.wav-1
Phae.long1.wav-1           26.436           29.014           39.506
Phae.long1.wav-2           26.297           30.795           36.721
Phae.long1.wav-3           24.198           28.689           41.315
Phae.long2.wav-1           12.140           13.703           21.670
Phae.long2.wav-2           10.799           11.293           28.505
Phae.long3.wav-1            9.600           10.950           34.867
Phae.long3.wav-2            0.000            8.625           28.420
Phae.long3.wav-3            8.625            0.000           24.240
Phae.long4.wav-1           28.420           24.240            0.000
Phae.long4.wav-2           30.684           25.434            9.647
Phae.long4.wav-3           30.048           26.604           15.330
                 Phae.long4.wav-2 Phae.long4.wav-3
Phae.long1.wav-1           33.217           30.887
Phae.long1.wav-2           32.438           31.487
Phae.long1.wav-3           32.369           31.159
Phae.long2.wav-1           24.228           22.703
Phae.long2.wav-2           30.846           32.099
Phae.long3.wav-1           32.413           29.364
Phae.long3.wav-2           30.684           30.048
Phae.long3.wav-3           25.434           26.604
Phae.long4.wav-1            9.647           15.330
Phae.long4.wav-2            0.000            8.372
Phae.long4.wav-3            8.372            0.000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfDTW", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dfts")
> ### * dfts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dfts
> ### Title: Extract the dominant frequency values as a time series
> ### Aliases: dfts
> 
> ### ** Examples
> 
> {
+ # set the temp directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ writeWave(Phae.long2, "Phae.long2.wav") #save sound files 
+ writeWave(Phae.long1, "Phae.long1.wav")
+ 
+ # run function 
+ dfts(X = selec.table, length.out = 30, flim = c(1, 12), bp = c(2, 9), wl = 300)
+ 
+ }
Creating spectrograms overlaid with dominant frequency measurements:
      sound.files selec dfreq-1 dfreq-2 dfreq-3 dfreq-4 dfreq-5 dfreq-6 dfreq-7
1  Phae.long1.wav     1   7.125   7.275   7.275   7.430   6.665   5.229   5.405
2  Phae.long1.wav     2   6.900   7.146   7.241   7.399   7.500   7.528   6.052
3  Phae.long1.wav     3   7.050   7.153   7.200   4.885   6.347   7.650   7.971
4  Phae.long2.wav     1      NA   4.950   5.025   5.475   5.550   5.550   5.700
5  Phae.long2.wav     2   4.800   4.872   5.015   5.092   5.165   5.734   5.791
6  Phae.long3.wav     1   6.975   4.800   4.875   5.775   6.225   6.525   6.375
7  Phae.long3.wav     2   4.575   4.725   5.025   5.100   5.700   6.525   6.300
8  Phae.long3.wav     3   4.650   4.725   5.400   5.400   5.400   6.000   5.850
9  Phae.long4.wav     1   5.325   5.335   5.421   5.506   5.674   5.827   5.974
10 Phae.long4.wav     2   8.025   5.408   5.491   5.597   5.793   6.003   6.215
11 Phae.long4.wav     3   7.875   7.678   5.356   5.498   5.643   5.814   5.897
   dfreq-8 dfreq-9 dfreq-10 dfreq-11 dfreq-12 dfreq-13 dfreq-14 dfreq-15
1    5.475   5.532    8.079    6.600    6.481    6.460    6.453    6.065
2    5.390   6.049    8.322    6.409    6.603    6.605    6.450    6.385
3    6.305   8.035    8.449    6.959    6.525    6.525    6.455    6.282
4    6.225   6.300    6.375    6.525    5.625    5.625    7.350    7.350
5    5.946   3.828    5.121    5.289    5.946    6.600    6.641    6.675
6    6.300   6.375    6.600    6.600    6.675    6.675    6.600    6.900
7    6.225   6.375    6.525    6.300    5.925    6.075    6.150    6.825
8    5.850   5.850    5.850    6.225    6.150    6.900    6.150    6.675
9    6.217   6.631    6.954    7.182    7.353    7.523    7.753    8.149
10   6.517   6.910    7.115    7.358    7.585    7.704    7.978    8.242
11   6.251   6.561    6.879    7.058    7.285    7.422    7.728    7.909
   dfreq-16 dfreq-17 dfreq-18 dfreq-19 dfreq-20 dfreq-21 dfreq-22 dfreq-23
1     6.106    5.136    4.712    4.849    6.926    6.758    6.861    7.019
2     6.140    6.044    5.483    5.250    5.188    7.195    6.931    6.830
3     6.075    5.379    5.638    4.562    6.944    6.781    6.750    7.001
4     6.750    6.975    7.500    7.350    7.350    5.475    6.300    6.375
5     7.109    7.575    7.203    6.647    6.626    6.745    6.900    6.918
6     6.450    6.600    6.825    6.375    6.375    6.600    6.675    6.675
7     6.675    6.675    6.600    6.900    6.600    6.600    7.500    6.600
8     6.300    6.375    6.750    6.375    6.450    6.675    6.675    6.600
9     7.986    4.565    5.203    5.509    5.765    5.964    6.134    6.243
10    6.173    4.916    5.346    5.594    5.915    6.010    6.163    6.391
11    5.881    7.050    5.819    5.209    5.540    5.716    5.951    6.199
   dfreq-24 dfreq-25 dfreq-26 dfreq-27 dfreq-28 dfreq-29 dfreq-30
1     7.120    7.179    7.032    6.903    7.125    7.174    7.125
2     6.926    7.022    7.184    7.200    7.200    7.146    7.200
3     7.050    7.275    7.275    7.146    7.236    7.210    7.200
4     7.500    7.200    7.200    6.600    7.800    7.575    6.000
5     6.882    6.525    6.515    6.559    7.438    6.600    6.600
6     7.125    6.975    6.975    6.975    6.900    7.050    8.025
7     6.600    6.600    6.600    6.600    6.900    6.900    6.975
8     6.600    6.675    6.600    6.675    6.900    6.525    6.600
9     6.776    6.947    6.680    5.522    4.428    3.941    3.525
10    6.882    7.011    6.610    5.266    4.324    3.998    3.675
11    6.610    6.822    7.076    5.648    4.772    4.120    3.900
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dfts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ffDTW")
> ### * ffDTW
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ffDTW
> ### Title: Acoustic dissimilarity using dynamic time warping on fundamental
> ###   frequency contours
> ### Aliases: ffDTW
> 
> ### ** Examples
> 
> {
+ # set the temp directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ writeWave(Phae.long2, "Phae.long2.wav") #save sound files 
+ writeWave(Phae.long1, "Phae.long1.wav")
+ 
+ # run function 
+ ffDTW(selec.table[1:4,], length.out = 30, flim = c(1, 12), img = TRUE, bp = c(1, 9), wl = 300)
+ }
Creating spectrograms overlaid with fundamental frequency measurements:
                 Phae.long1.wav-1 Phae.long1.wav-2 Phae.long1.wav-3
Phae.long1.wav-1            0.000           16.859           22.810
Phae.long1.wav-2           16.859            0.000           13.009
Phae.long1.wav-3           22.810           13.009            0.000
Phae.long2.wav-1           17.365           84.824           35.844
                 Phae.long2.wav-1
Phae.long1.wav-1           17.365
Phae.long1.wav-2           84.824
Phae.long1.wav-3           35.844
Phae.long2.wav-1            0.000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ffDTW", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ffts")
> ### * ffts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ffts
> ### Title: Extract the fundamental frequency values as a time series
> ### Aliases: ffts
> 
> ### ** Examples
> 
> {
+ # set the temp directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ writeWave(Phae.long1, "Phae.long1.wav") #save sound files 
+ writeWave(Phae.long2, "Phae.long2.wav") #save sound files 
+ 
+ # run function 
+ ffts(selec.table, length.out = 50, flim = c(1, 12), bp = c(2, 9), wl = 300)
+ 
+ # Fundamental frequency is not accurate for noisy signals, works better with pure tones
+ 
+ }
Creating spectrograms overlaid with fundamental frequency measurements:
      sound.files selec ffreq-1 ffreq-2 ffreq-3 ffreq-4 ffreq-5 ffreq-6 ffreq-7
1  Phae.long1.wav     1   2.500   2.500   2.500   2.500   2.500   2.500   2.500
2  Phae.long1.wav     2   2.500   2.500   2.500   2.500   2.500   2.500   2.500
3  Phae.long1.wav     3      NA      NA      NA   2.500   2.500   2.500   2.500
4  Phae.long2.wav     1   2.500   3.520   4.541   5.561   5.625   5.625   5.625
5  Phae.long2.wav     2   2.500   2.500   2.500   2.500   2.500   2.500   2.500
6  Phae.long3.wav     1   5.625   5.625   5.625   5.625   5.625   5.625   5.625
7  Phae.long3.wav     2   2.500   3.457   4.413   5.370   5.625   5.625   5.625
8  Phae.long3.wav     3   5.625   5.625   5.625   5.625   4.994   4.133   3.272
9  Phae.long4.wav     1      NA      NA      NA   2.812   2.812   2.812   2.812
10 Phae.long4.wav     2   2.812   2.812   2.812   2.812   2.812   2.812   2.845
11 Phae.long4.wav     3   2.812   2.812   2.812   2.812   2.812   2.812   2.845
   ffreq-8 ffreq-9 ffreq-10 ffreq-11 ffreq-12 ffreq-13 ffreq-14 ffreq-15
1    2.500   2.500    2.513    2.653    2.793    4.630    6.735    6.276
2    2.500   2.500    2.500    2.526    2.653    2.781    2.812    2.812
3    2.500   2.500    2.500    2.500    2.500    2.621    2.761    4.152
4    4.936   4.149    3.362    3.214    3.214    3.214    3.805    4.592
5    2.545   2.640    2.736    2.837    2.960    3.083    3.206    3.903
6    5.281   4.543    3.805    3.214    3.214    3.214    3.214    4.439
7    5.281   4.543    3.805    3.214    3.214    3.214    3.214    4.439
8    3.214   4.075    4.936    5.740    6.314    6.888    7.462    7.500
9    2.812   2.812    2.862    3.001    3.140    3.214    3.214    3.214
10   2.985   3.124    3.214    3.214    3.214    3.214    3.214    3.214
11   2.985   3.124    3.214    3.214    3.214    3.214    3.214    3.214
   ffreq-16 ffreq-17 ffreq-18 ffreq-19 ffreq-20 ffreq-21 ffreq-22 ffreq-23
1     4.351    3.214    3.214    3.214    3.214    3.214    3.214    3.214
2     3.386    5.300    7.213    6.013    4.264    3.214    3.214    3.214
3     6.256    7.500    7.500    7.150    5.226    3.302    3.214    3.214
4     5.379    5.835    6.142    6.448    6.754    7.060    7.366    7.500
5     4.641    5.379    5.625    5.625    5.625    5.855    6.429    7.003
6     5.751    7.063    7.500    7.500    7.500    7.500    7.500    7.500
7     5.751    7.063    7.500    7.500    7.500    7.500    7.500    7.500
8     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
9     3.324    3.509    3.695    3.750    3.750    3.750    3.750    3.750
10    3.324    3.509    3.695    3.750    3.750    3.750    3.750    3.750
11    3.324    3.509    3.695    3.750    3.750    3.750    3.750    3.750
   ffreq-24 ffreq-25 ffreq-26 ffreq-27 ffreq-28 ffreq-29 ffreq-30 ffreq-31
1     3.083    2.903    3.444    4.707    5.510    5.089    4.668    4.247
2     3.214    3.214    3.132    2.968    2.870    4.018    5.166    5.395
3     4.001    5.084    5.625    5.625    5.625    5.625    5.576    4.493
4     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
5     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
6     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
7     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
8     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
9     3.750    3.750    3.750    3.765    4.026    4.286    4.397    3.811
10    3.750    3.995    4.255    4.466    3.880    3.295    2.812    2.812
11    3.750    3.750    3.750    3.765    4.026    4.286    4.397    3.811
   ffreq-32 ffreq-33 ffreq-34 ffreq-35 ffreq-36 ffreq-37 ffreq-38 ffreq-39
1     3.827    3.553    3.313    3.214    3.214    3.214    3.214    3.214
2     5.013    4.630    4.247    3.865    3.750    3.750    3.750    3.750
3     3.411    3.214    3.214    3.214    3.214    3.214    3.214    3.214
4     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
5     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
6     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
7     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
8     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
9     3.226    2.812    2.812    2.812    2.870    3.009    3.149    3.214
10    2.812    2.833    2.903    2.972    3.042    3.112    3.181    3.214
11    3.226    2.812    2.812    2.812    2.870    3.009    3.149    3.214
   ffreq-40 ffreq-41 ffreq-42 ffreq-43 ffreq-44 ffreq-45 ffreq-46 ffreq-47
1     3.214    3.214    3.214    3.214    3.214    3.214    4.089    6.013
2     3.750    3.575    3.356    3.291    3.509    3.728    3.750    3.750
3     3.214    3.214    3.433    3.673    3.750    3.750    3.750    3.750
4     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
5     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
6     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
7     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
8     7.500    7.500    7.500    7.500    7.500    7.500    7.500    7.500
9     3.214    3.214    3.214    3.214    3.214    3.854    4.690    5.527
10    3.214    3.214    3.214    3.214    3.214    3.854    4.690    5.527
11    3.214    3.214    3.214    3.214    3.214    3.854    4.690    5.527
   ffreq-48 ffreq-49 ffreq-50
1     7.500    7.500    7.500
2     3.750    3.750    3.750
3     3.750    3.750    3.750
4     7.500    7.500    7.500
5     7.500    7.500    7.500
6     7.500    7.500    7.500
7     7.500    7.500    7.500
8     7.500    7.500    7.500
9     5.625    5.625    5.625
10    5.625    5.625    5.625
11    5.625    5.625    5.625
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ffts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("filtersels")
> ### * filtersels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: filtersels
> ### Title: Subset selection data frames based on manually filtered image
> ###   files
> ### Aliases: filtersels
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  
> ##D # First set temporary folder
> ##D # setwd(tempdir())
> ##D 
> ##D # save wav file examples
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D 
> ##D specreator(selec.table, flim = c(0, 11), inner.mar = c(4,4.5,2,1), outer.mar = c(4,2,2,1), 
> ##D picsize = 2, res = 300, cexlab = 2, mar = 0.05, wl = 300)
> ##D 
> ##D #go to the working directory and delete some images
> ##D 
> ##D #filter selection data frame
> ##D fmloc <- filtersels(X = selec.table)
> ##D 
> ##D #this data frame does not have the selections corresponding to the images that were deleted
> ##D fmloc
> ##D 
> ##D #now using lspec images
> ##D lspec(sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300, ovlp = 10)
> ##D 
> ##D #go to the working directory and delete lspec images (the ones with several rows of spectrograms)
> ##D 
> ##D #filter selection data frame
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("filtersels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fixwavs")
> ### * fixwavs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fixwavs
> ### Title: Fix .wav files to allow importing them into R
> ### Aliases: fixwavs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D writeWave(Phae.long4,"Phae.long4.wav") 
> ##D 
> ##D fixwavs(files = selec.table$sound.files)
> ##D 
> ##D #check this folder
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fixwavs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("frange")
> ### * frange
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: frange
> ### Title: Detect frequency range iteratively
> ### Aliases: frange
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ frange(X = selec.table, wl = 112, fsmooth = 1, threshold = 13, widths = c(4, 1), 
+ img = TRUE, pb = TRUE, it = "tiff", line = TRUE, mar = 0.1, bp = c(1,10.5), 
+ flim = c(0, 11))
+ }
      sound.files channel selec     start       end sel.comment rec.comment
1  Phae.long1.wav       1     1 1.1693549 1.3423884         c24          NA
2  Phae.long1.wav       1     2 2.1584085 2.3214565         c25          NA
3  Phae.long1.wav       1     3 0.3433366 0.5182553         c26          NA
4  Phae.long2.wav       1     1 0.1595983 0.2921692         c27          NA
5  Phae.long2.wav       1     2 1.4570585 1.5832087         c28          NA
6  Phae.long3.wav       1     1 0.6265520 0.7577715         c29          NA
7  Phae.long3.wav       1     2 1.9742132 2.1043921         c30          NA
8  Phae.long3.wav       1     3 0.1233643 0.2545812         c31          NA
9  Phae.long4.wav       1     1 1.5168116 1.6622365         c32          NA
10 Phae.long4.wav       1     2 2.9326920 3.0768784         c33          NA
11 Phae.long4.wav       1     3 0.1453977 0.2904966         c34          NA
   bottom.freq  top.freq
1     2.282694  8.782169
2     3.149291  8.782169
3     2.282694  8.998818
4     3.365940 10.298713
5     4.015888  8.998818
6     4.882484  9.215467
7     4.665835  8.998818
8     4.665835  9.215467
9     2.715993  8.998818
10    2.715993  9.432117
11    2.499343  8.998818
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("frange", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("frange.detec")
> ### * frange.detec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: frange.detec
> ### Title: Detect frequency range on wave objects
> ### Aliases: frange.detec
> 
> ### ** Examples
> 
> {
+ data(tico)
+ frange.detec(wave = tico, wl = 512, fsmooth = 0.01, threshold = 1, bp = c(2, 8),
+  widths = c(4, 2))
+ 
+ data(sheep)
+ frange.detec(wave = sheep, wl = 512, fsmooth = 0.2, threshold = 50, bp = c(0.3, 1), 
+ flim = c(0, 1.5), pal = reverse.heat.colors, main = "sheep")
+ }
  bottom.freq  top.freq
1    0.467689 0.6808449
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("frange.detec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("is.selection.table")
> ### * is.selection.table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: is.selection.table
> ### Title: Check if object is of class "selection.table"
> ### Aliases: is.selection.table
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ 
+ is.selection.table(selec.table)
+ 
+ # setwd(tempdir())
+ 
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ st <- make.selection.table(selec.table)
+ 
+ is.selection.table(st)
+ 
+ class(st)
+ }
[1] "selection.table" "data.frame"     
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("is.selection.table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lspec")
> ### * lspec
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lspec
> ### Title: Create long spectrograms of whole sound files
> ### Aliases: lspec
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2","selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav") 
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D 
> ##D lspec(sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300)
> ##D 
> ##D # including selections
> ##D lspec(sxrow = 2, rows = 8, X = selec.table, pal = reverse.heat.colors, redo = TRUE, wl = 300)
> ##D 
> ##D #check this floder
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lspec", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lspec2pdf")
> ### * lspec2pdf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lspec2pdf
> ### Title: 'lspec2pdf' combines 'lspec' images in .jpeg format to a single
> ###   pdf file.
> ### Aliases: lspec2pdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2"))
> ##D writeWave(Phae.long1,"Phae.long1.wav") 
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D 
> ##D lspec(sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300, it = "jpeg")
> ##D 
> ##D #now create single pdf removing jpeg
> ##D lspec2pdf(keep.img = FALSE)
> ##D 
> ##D # check this floder
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lspec2pdf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("make.selection.table")
> ### * make.selection.table
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: make.selection.table
> ### Title: Create 'selection.table' class objects
> ### Aliases: make.selection.table
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ st <- make.selection.table(X = selec.table)
+ 
+ class(st)
+ }
[1] "selection.table" "data.frame"     
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("make.selection.table", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("manualoc")
> ### * manualoc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: manualoc
> ### Title: Interactive view of spectrograms
> ### Aliases: manualoc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D # save wav file examples
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D writeWave(Phae.long4,"Phae.long4.wav")
> ##D 
> ##D manualoc(wl = 300)
> ##D # need to use the buttoms to manipulate function
> ##D # check working directory for .csv file after stopping function
> ##D #check here:
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("manualoc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("move.imgs")
> ### * move.imgs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: move.imgs
> ### Title: Move/copy image files between directories
> ### Aliases: move.imgs
> 
> ### ** Examples
> 
> {
+ #Set temporary working directory
+ # setwd(tempdir())
+ 
+ #load data
+ data("Cryp.soui")
+ writeWave(Cryp.soui, "Cryp.soui.wav") #save sound files 
+ 
+ #autodetec location of signals
+ ad <- autodetec(threshold = 6, bp = c(1, 3), mindur = 1.2,
+ maxdur = 3, img = FALSE, ssmooth = 600, wl = 300, flist = "Cryp.soui.wav")
+ 
+ #track dominant frequency graphs with freq reange detection
+ trackfreqs(X = ad[!is.na(ad$start),], flim = c(0, 5), ovlp = 90, it = "tiff",
+ bp = c(1, 3), contour = "df", wl = 300, frange = TRUE)
+ 
+ #copy files
+ move.imgs(cut = FALSE)
+ 
+ #cut files
+ move.imgs(cut = TRUE, to = "image_files")
+ 
+ # Check this folder
+ getwd()
+ }
Detecting signals in sound files:
All files already existed in image_files[1] "/home/m/Dropbox/warbleR/warbleR.Rcheck"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("move.imgs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mp32wav")
> ### * mp32wav
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mp32wav
> ### Title: Convert .mp3 files to .wav
> ### Aliases: mp32wav
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # First set temporary folder
> ##D # setwd(tempdir())
> ##D  
> ##D #Then download mp3 files from xeno-canto
> ##D querxc(qword = "Phaethornis aethopygus", download = TRUE)
> ##D 
> ##D # Convert all files to .wav format
> ##D mp32wav()
> ##D 
> ##D #check this folder!!
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mp32wav", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ovlp_sels")
> ### * ovlp_sels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ovlp_sels
> ### Title: Find overlapping selections
> ### Aliases: ovlp_sels
> 
> ### ** Examples
> 
> {
+ #no overlap
+ ovlp_sels(X =  selec.table)
+ 
+ # modified selec.table to make the first and second selection overlap
+ Y <- selec.table
+ Y$end[4] <- 1.5
+   
+  ovlp_sels(X =  Y)
+ 
+ # drop overlapping
+  ovlp_sels(X =  Y, drop = TRUE)
+ 
+ # get index instead
+  ovlp_sels(X =  Y, index = TRUE)
+ }
No overlapping selections were found2 selections overlapped2 selections overlapped, 1 were removed[1] 5
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ovlp_sels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("querxc")
> ### * querxc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: querxc
> ### Title: Access 'Xeno-Canto' recordings and metadata
> ### Aliases: querxc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D # search without downloading
> ##D df1 <- querxc(qword = 'Phaethornis anthophilus', download = FALSE)
> ##D View(df1)
> ##D 
> ##D # downloading files
> ##D querxc(qword = 'Phaethornis anthophilus', download = TRUE)
> ##D 
> ##D # check this folder
> ##D getwd()
> ##D 
> ##D ## search using xeno-canto advance query ###
> ##D orth.pap <- querxc(qword = 'gen:orthonyx cnt:papua loc:tari', download = FALSE)
> ##D  
> ##D # download file using the output data frame as input
> ##D querxc(X = orth.pap)
> ##D 
> ##D # use quotes for queries with more than 1 word (e.g. Costa Rica),note that the 
> ##D # single quotes are used for the whole 'qword' and double quotes for the 2-word term inside
> ##D #Phaeochroa genus in Costa Rica 
> ##D phae.cr <- querxc(qword = 'gen:phaeochroa cnt:"costa rica"', download = FALSE)
> ##D 
> ##D # several terms can be searched for in the same field
> ##D # search for all female songs in sound type
> ##D femsong <- querxc(qword = 'type:song type:female', download = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("querxc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rm_sil")
> ### * rm_sil
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rm_sil
> ### Title: Remove silence in wave files
> ### Aliases: rm_sil
> 
> ### ** Examples
> 
> {
+ # Set temporary working directory
+ # setwd(tempdir())
+ 
+ # save sound file examples
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ sil <- silence(samp.rate = 22500, duration = 3, xunit = "time")
+ 
+ wv1 <- pastew(pastew(Phae.long1, sil, f = 22500, output = "Wave"), 
+ Phae.long2, f = 22500, output = "Wave")
+ 
+ #check silence in between amplitude peaks
+ env(wv1)
+ 
+  #save wave file
+  writeWave(object = wv1, filename = "wv1.wav", extensible = FALSE)
+ 
+ #remove silence
+ rm_sil(flist = "wv1.wav")
+ 
+ # OR this is tempdir was used instead
+ # rm_sil(path = tempdir(), flist = "wv1.wav")
+ 
+ #check this floder
+ getwd()
+ }
searching for silence segments in wave files:
[1] "/home/m/Dropbox/warbleR/warbleR.Rcheck"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rm_sil", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("seltailor")
> ### * seltailor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: seltailor
> ### Title: Interactive view of spectrograms to tailor selections
> ### Aliases: seltailor
> 
> ### ** Examples
> 
> ## Not run: 
> ##D #Set temporary working directory
> ##D # setwd(tempdir())
> ##D 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
> ##D writeWave(Phae.long1,"Phae.long1.wav")
> ##D writeWave(Phae.long2,"Phae.long2.wav")
> ##D writeWave(Phae.long3,"Phae.long3.wav")
> ##D writeWave(Phae.long4,"Phae.long4.wav")
> ##D 
> ##D seltailor(X =  selec.table, flim = c(1,12), wl = 300, auto.next = TRUE)
> ##D 
> ##D # Read output .csv file
> ##D seltailor.df <- read.csv("seltailor_output.csv")
> ##D seltailor.df
> ##D 
> ##D # check this directory for .csv file after stopping function
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("seltailor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sig2noise")
> ### * sig2noise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sig2noise
> ### Title: Measure signal-to-noise ratio
> ### Aliases: sig2noise
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ data(list = c("Phae.long1","selec.table"))
+ writeWave(Phae.long1, "Phae.long1.wav") #save sound files 
+ 
+ # specifying the correct margin is important
+ # use snrspecs to troubleshoot margins for sound files
+ sig2noise(selec.table[grep("Phae.long1", selec.table$sound.files), ], mar = 0.2)
+ 
+ # this smaller margin doesn't overlap neighboring signals
+ sig2noise(selec.table[grep("Phae.long1", selec.table$sound.files), ], mar = 0.1)
+ }
     sound.files channel selec     start       end bottom.freq top.freq
1 Phae.long1.wav       1     1 1.1693549 1.3423884    2.220105 8.604378
2 Phae.long1.wav       1     2 2.1584085 2.3214565    2.169437 8.807053
3 Phae.long1.wav       1     3 0.3433366 0.5182553    2.218294 8.756604
  sel.comment rec.comment      SNR
1         c24          NA 23.55346
2         c25          NA 22.80563
3         c26          NA 21.12838
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sig2noise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sim_songs")
> ### * sim_songs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sim_songs
> ### Title: Simulate animal vocalizations
> ### Aliases: sim_songs
> 
> ### ** Examples
> 
> {
+  # simulate a song with 3 elements and no harmonics
+  sm_sng <- sim_songs(n = 3, harms = 1)
+  
+  # plot spectro
+  seewave::spectro(sm_sng)
+  
+  # simulate a song with 5 elements and 2 extra harmonics
+ sm_sng2 <- sim_songs(n = 5, harms = 3)
+ 
+  # plot spectro
+  seewave::spectro(sm_sng2)
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sim_songs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("snrspecs")
> ### * snrspecs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: snrspecs
> ### Title: Spectrograms with background noise margins
> ### Aliases: snrspecs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Set temporary working directory
> ##D # setwd(tempdir())
> ##D  
> ##D data(list = c("Phae.long1", "Phae.long2", "selec.table"))
> ##D writeWave(Phae.long1, "Phae.long1.wav") #save sound.files
> ##D writeWave(Phae.long2, "Phae.long2.wav") 
> ##D 
> ##D # make Phae.long1 and Phae.long2 spectrograms
> ##D # snrmar needs to be smaller before moving on to sig2noise()
> ##D 
> ##D snrspecs(selec.table, flim = c(0, 14), inner.mar = c(4,4.5,2,1), outer.mar = c(4,2,2,1), 
> ##D picsize = 2, res = 300, cexlab = 2, mar = 0.2, snrmar = 0.1, it = "jpeg", wl = 300)
> ##D 
> ##D # make only Phae.long1 spectrograms
> ##D # snrmar now doesn't overlap neighboring signals
> ##D 
> ##D snrspecs(selec.table[grepl(c("Phae.long1"), selec.table$sound.files), ], flim = c(3, 14),
> ##D inner.mar = c(4,4.5,2,1), outer.mar = c(4,2,2,1), picsize = 2, res = 300, cexlab = 2,
> ##D mar = 0.2, snrmar = 0.01, wl = 300)
> ##D 
> ##D #check this folder!!
> ##D getwd()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("snrspecs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sp.en.ts")
> ### * sp.en.ts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sp.en.ts
> ### Title: Extract the spectral entropy across signals as a time series
> ### Aliases: sp.en.ts
> 
> ### ** Examples
> 
> {
+ # set the temp directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2",  "Phae.long3",  "Phae.long4","selec.table"))
+ writeWave(Phae.long2, "Phae.long2.wav") #save sound files 
+ writeWave(Phae.long1, "Phae.long1.wav")
+ writeWave(Phae.long3, "Phae.long3.wav") #save sound files 
+ writeWave(Phae.long4, "Phae.long4.wav")
+ 
+ # without clip edges
+ sp.en.ts(X = selec.table, threshold = 10, bp = NULL, clip.edges = FALSE, length.out = 10,
+  type = "b", sp.en.range = c(-25, 10))
+ 
+ # with clip edges and length.out 10
+ sp.en.ts(X = selec.table, threshold = 10, bp = c(2, 12), clip.edges = TRUE, length.out = 10)
+ 
+ }
Creating spectrograms overlaid with dominant frequency measurements:
Creating spectrograms overlaid with dominant frequency measurements:
      sound.files selec sp.en-1 sp.en-2 sp.en-3 sp.en-4 sp.en-5 sp.en-6 sp.en-7
1  Phae.long1.wav     1   0.895   0.843   0.859   0.891   0.840   0.880   0.861
2  Phae.long1.wav     2   0.901   0.800   0.882   0.898   0.867   0.841   0.880
3  Phae.long1.wav     3   0.945   0.881   0.876   0.931   0.859   0.878   0.931
4  Phae.long2.wav     1   0.929   0.890   0.924   0.918   0.888   0.880   0.887
5  Phae.long2.wav     2   0.920   0.899   0.925   0.921   0.906   0.879   0.882
6  Phae.long3.wav     1   0.932   0.905   0.852   0.871   0.862   0.862   0.858
7  Phae.long3.wav     2   0.933   0.905   0.885   0.875   0.850   0.867   0.862
8  Phae.long3.wav     3   0.916   0.901   0.820   0.870   0.851   0.858   0.869
9  Phae.long4.wav     1   0.924   0.842   0.815   0.825   0.835   0.884   0.881
10 Phae.long4.wav     2   0.931   0.835   0.834   0.834   0.849   0.900   0.845
11 Phae.long4.wav     3   0.949   0.828   0.818   0.839   0.855   0.886   0.868
   sp.en-8 sp.en-9 sp.en-10
1    0.779   0.826    0.933
2    0.849   0.787    0.862
3    0.782   0.826    0.862
4    0.897   0.878    0.876
5    0.853   0.878    0.893
6    0.849   0.855    0.880
7    0.854   0.843    0.851
8    0.844   0.841    0.865
9    0.776   0.804    0.901
10   0.770   0.818    0.903
11   0.804   0.831    0.912
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sp.en.ts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("specan")
> ### * specan
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: specan
> ### Title: Measure acoustic parameters in batches of sound files
> ### Aliases: specan
> 
> ### ** Examples
> 
> {
+ # First set temporary folder
+ # setwd(tempdir())
+ 
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec.table"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ writeWave(Phae.long4,"Phae.long4.wav")
+ 
+ a <- specan(X = selec.table, bp = c(0, 22))
+ 
+ # using a diferent threshold
+ a <- specan(X = selec.table, bp = c(0, 22), threshold = 20)
+ # View(a)
+ 
+ }
measuring acoustic parameters:
measuring acoustic parameters:
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("specan", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("specreator")
> ### * specreator
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: specreator
> ### Title: Spectrograms of selected signals
> ### Aliases: specreator
> 
> ### ** Examples
> 
> { 
+ # First set empty folder
+ # setwd(tempdir())
+ data(list = c("Phae.long1", "Phae.long2","selec.table"))
+ writeWave(Phae.long1, "Phae.long1.wav") #save sound files 
+ writeWave(Phae.long2, "Phae.long2.wav")
+ 
+ # make spectrograms
+ 
+ specreator(selec.table, flim = c(0, 11), res = 300, mar = 0.05, wl = 300)
+  
+  #check this folder
+ getwd()
+ }
[1] "/home/m/Dropbox/warbleR/warbleR.Rcheck"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("specreator", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("track_harm")
> ### * track_harm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: track_harm
> ### Title: Track harmonic frequency contour
> ### Aliases: track_harm
> 
> ### ** Examples
> 
> {
+ #Set temporary working directory
+ # setwd(tempdir())
+ 
+ #load data
+ 
+ # Check this folder
+ getwd()
+ 
+ #track both frequencies 
+ 
+ }
[1] "/home/m/Dropbox/warbleR/warbleR.Rcheck"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("track_harm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("trackfreqs")
> ### * trackfreqs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: trackfreqs
> ### Title: Spectrograms with frequency measurements
> ### Aliases: trackfreqs
> 
> ### ** Examples
> 
> {
+ #Set temporary working directory
+ # setwd(tempdir())
+ 
+ #load data
+ data("Cryp.soui")
+ writeWave(Cryp.soui, "Cryp.soui.wav") #save sound files 
+ 
+ #autodetec location of signals
+ ad <- autodetec(threshold = 6, bp = c(1, 3), mindur = 1.2,
+ maxdur = 3, img = FALSE, ssmooth = 600, wl = 300, flist = "Cryp.soui.wav")
+ 
+ #track dominant frequency graphs with freq reange detection
+ trackfreqs(X = ad[!is.na(ad$start),], flim = c(0, 5), ovlp = 90, it = "tiff",
+ bp = c(1, 3), contour = "df", wl = 300, frange = TRUE)
+ 
+ #using users frequency data (custom.contour argument) 
+ #first get contours using dfts
+ df <- dfts(X = ad[!is.na(ad$start),], flim = c(0, 5), ovlp = 90, img = FALSE,
+ bp = c(1, 3),  wl = 300)
+ 
+ # now input the dfts output into trackfreqs         
+ trackfreqs(X = ad[!is.na(ad$start),], custom.contour = df ,flim = c(0, 5), ovlp = 90, it = "tiff")
+ 
+ # Check this folder
+ getwd()
+ 
+ #track both frequencies 
+ trackfreqs(X = ad[!is.na(ad$start),], flim = c(0, 5), ovlp = 90, it = "tiff",
+ bp = c(1, 3), contour = "both", wl = 300)
+ 
+ }
Detecting signals in sound files:
measuring dominant frequency:
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("trackfreqs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("wavdur")
> ### * wavdur
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: wavdur
> ### Title: Measure the duration of sound files
> ### Aliases: wavdur
> 
> ### ** Examples
> 
> {
+ # Set temporary working directory
+ # setwd(tempdir())
+ 
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3"))
+ writeWave(Phae.long1,"Phae.long1.wav")
+ writeWave(Phae.long2,"Phae.long2.wav")
+ writeWave(Phae.long3,"Phae.long3.wav")
+ 
+ wavdur()
+ }
            sound.files  duration
1         Cryp.soui.wav 8.0004444
2  Phae.long1-1-c24.wav 0.2730667
3      Phae.long1-1.wav 0.2730667
4  Phae.long1-2-c25.wav 0.2630667
5      Phae.long1-2.wav 0.2630667
6  Phae.long1-3-c26.wav 0.2749333
7      Phae.long1-3.wav 0.2749333
8        Phae.long1.wav 2.5000444
9  Phae.long2-1-c27.wav 0.2325778
10     Phae.long2-1.wav 0.2325778
11 Phae.long2-2-c28.wav 0.2261333
12     Phae.long2-2.wav 0.2261333
13       Phae.long2.wav 1.7000444
14 Phae.long3-1-c29.wav 0.2312444
15     Phae.long3-1.wav 0.2312444
16 Phae.long3-2-c30.wav 0.2301778
17     Phae.long3-2.wav 0.2301778
18 Phae.long3-3-c31.wav 0.2312000
19     Phae.long3-3.wav 0.2312000
20       Phae.long3.wav 2.2000000
21 Phae.long4-1-c32.wav 0.2454222
22     Phae.long4-1.wav 0.2454222
23 Phae.long4-2-c33.wav 0.2441778
24     Phae.long4-2.wav 0.2441778
25 Phae.long4-3-c34.wav 0.2451111
26     Phae.long4-3.wav 0.2451111
27       Phae.long4.wav 3.2000000
28              wv1.wav 7.2000889
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("wavdur", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("xcmaps")
> ### * xcmaps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: xcmaps
> ### Title: Maps of 'Xeno-Canto' recordings by species
> ### Aliases: xcmaps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # search in xeno-canto
> ##D X <- querxc("Phaethornis anthophilus", download = FALSE)
> ##D 
> ##D #create image in R graphic device
> ##D xcmaps(X, img = FALSE)
> ##D 
> ##D #or save it as a file in the working directory
> ##D xcmaps(X)
> ##D 
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("xcmaps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("xcorr")
> ### * xcorr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: xcorr
> ### Title: Spectrogram cross-correlation
> ### Aliases: xcorr
> 
> ### ** Examples
> 
> {
+ #First set temporary working directory
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4","selec.table"))
+ writeWave(Phae.long1, "Phae.long1.wav") #save sound files
+ writeWave(Phae.long2, "Phae.long2.wav")
+ writeWave(Phae.long3, "Phae.long3.wav")
+ writeWave(Phae.long4, "Phae.long4.wav")
+ 
+ xcor <- xcorr(X = selec.table, wl = 300, frange = c(2, 9), ovlp = 90,
+ dens = 1, wn = 'hanning', cor.method = "pearson")
+ 
+ }
creating templates:
running cross-correlation:
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("xcorr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("xcorr.graph")
> ### * xcorr.graph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: xcorr.graph
> ### Title: Pairwise plots of spectrogram cross-correlation scores
> ### Aliases: xcorr.graph
> 
> ### ** Examples
> 
> {
+ #load data
+ #First set temporary working directory]
+ # setwd(tempdir())
+ 
+ #load data
+ data(list = c("Phae.long1", "Phae.long2", "selec.table"))
+ writeWave(Phae.long1, "Phae.long1.wav") #save sound files
+ writeWave(Phae.long2, "Phae.long2.wav")
+ 
+  #run cross correlation first
+  xcor<-xcorr(X = selec.table[1:5,], wl =300, frange= c(2, 9), ovlp=90, dens=0.8, 
+  wn='hanning', cor.method = "pearson", cor.mat = FALSE) 
+  
+  #plot pairwise scores
+   xcorr.graph(X = xcor, cex.cor = 2, cex.lab = 1, rel.cex = FALSE)
+ }
creating templates:
running cross-correlation:
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("xcorr.graph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  28.544 0.248 29.188 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
