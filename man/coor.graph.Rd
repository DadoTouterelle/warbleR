% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/coor.graph.R
\name{coor.graph}
\alias{coor.graph}
\title{Coordinated singing graphs}
\usage{
coor.graph(X, only.coor = FALSE, ovlp = TRUE, xl = 1,  res= 80, it = "jpeg")
}
\arguments{
\item{X}{Data frame containing columns for singing event (sing.event),
individual (indiv), and start and end time of signal (start and end).}

\item{only.coor}{Logical. If \code{TRUE} only the segment in which both individuals are singing is
included (solo singing is removed). Default is \code{FALSE}.}

\item{ovlp}{Logical. If \code{TRUE} the vocalizations that overlap in time are highlighted.
Default is \code{TRUE}.}

\item{xl}{Numeric vector of length 1, a constant by which to scale
spectrogram width. Default is 1.}

\item{res}{Numeric argument of length 1. Controls image resolution. Default is 80.}

\item{it}{A character vector of length 1 giving the image type to be used. Currently only
"tiff" and "jpeg" are admitted. Default is "jpeg".}
}
\value{
Graphs of the singing events in the input data frame are saved in the working directory.
}
\description{
\code{coor.graph} creates graphs of coordinated singing and highlights the signals that overlap
in time. The signals are represented by polygons of different colors.
}
\details{
This function provides visualization for coordination of acoustic signals. Signals are shown as
polygon across a time axis. It also shows which signals overlap, the amount of overlap, and
highlights the individual responsible for the overlap using a color code. The width of the polygons
depicting the time of overlap.
}
\examples{
\dontrun{

#First create empty folder
dir.create(file.path(getwd(),"temp"))
setwd(file.path(getwd(),"temp"))

####### simulate singing events ########
# create two sequences at different rates (not synchronize)
durs1 <- cumsum(rnorm(90,0.2, 0.01))
durs2 <- cumsum(rnorm(30,0.7, 0.01))
st.en1<-as.data.frame(matrix(durs1, ncol = 2, byrow = T))
st.en2<-as.data.frame(matrix(durs2, ncol = 2, byrow = T))
s1 <- data.frame(indiv = "a", st.en1)
s2 <- data.frame(indiv = "b", st.en2)

notsync<-data.frame(sing.event = "notsync", rbind(s1,s2))

# create two sequences at that overlap most of the time

durs1 <- cumsum(rnorm(90,c(0.4, 0.2), 0.01))
st.en1<-matrix(durs1, ncol = 2, byrow = T)
st2<-st.en1[,1]+rnorm(nrow(st.en1),0.1,0.05)
en2<-st2+rnorm(nrow(st.en1),0.2,0.01)
st.en2 <- cbind(st2, en2)
colnames(st.en2) <- colnames(st.en1)
s1 <- data.frame(indiv = "a", st.en1)
s2 <- data.frame(indiv = "b", st.en2)

ovlp<-data.frame(sing.event = "ovlp", rbind(s1,s2))


# create two sequences at that do not overlap most of the time

durs1 <- cumsum(rnorm(90,c(0.4, 0.2), 0.01))
st.en1<-matrix(durs1, ncol = 2, byrow = T)
st2<-st.en1[,1]+rnorm(nrow(st.en1), 0.25, 0.1)
en2<-st2+rnorm(nrow(st.en1), 0.2, 0.01)
st.en2 <- cbind(st2, en2)
colnames(st.en2) <- colnames(st.en1)
s1 <- data.frame(indiv = "a", st.en1)
s2 <- data.frame(indiv = "b", st.en2)

no.ovlp<-data.frame(sing.event = "no.ovlp", rbind(s1,s2))


#put all events together in a single data frame
colnames(ovlp) <- colnames(no.ovlp) <- colnames(notsync)
td<-rbind(ovlp, notsync, no.ovlp)
colnames(td)[3:4] <-c("start", "end")


#produce graphs
coor.graph(X = td, it = "tiff", res = 100)

# now try with some real data
#load data
data(coor.sing)

# make coor.graphs in tiff format
coor.graph(X = coor.sing, ovlp = T, only.coor = F, xl =2, res =80, it = "jpeg")

 # remove example directory
unlink(getwd(),recursive = TRUE)
}
}
\author{
Marcelo Araya-Salas (\url{http://marceloarayasalas.weebly.com/})
}

